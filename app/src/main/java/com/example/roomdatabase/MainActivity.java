package com.example.roomdatabase;

import android.app.AlertDialog;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.app.DatePickerDialog;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.Observer;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.tabs.TabLayout;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.example.roomdatabase.adapter.CustomerAdapter;
import com.example.roomdatabase.adapter.CakeAdapter;
import com.example.roomdatabase.adapter.OrderAdapter;
import com.example.roomdatabase.database.AppDatabase;
import com.example.roomdatabase.dao.CustomerDao;
import com.example.roomdatabase.dao.CakeDao;
import com.example.roomdatabase.dao.OrderDao;
import com.example.roomdatabase.entity.Customer;
import com.example.roomdatabase.entity.Cake;
import com.example.roomdatabase.entity.Order;

public class MainActivity extends AppCompatActivity {

    private TabLayout tabLayout;
    private RecyclerView recyclerView;
    private Button btnAdd, btnRefresh;
    
    private AppDatabase database;
    private CustomerDao customerDao;
    private CakeDao cakeDao;
    private OrderDao orderDao;
    
    private CustomerAdapter customerAdapter;
    private CakeAdapter cakeAdapter;
    private OrderAdapter orderAdapter;
    
    private List<Customer> customers = new ArrayList<>();
    private List<Cake> cakes = new ArrayList<>();
    private List<Order> orders = new ArrayList<>();
    
    private int currentTab = 0; // 0: Customers, 1: Cakes, 2: Orders
    
    // ExecutorService ƒë·ªÉ th·ª±c hi·ªán c√°c thao t√°c database
    private ExecutorService executorService;
    
    // LiveData observers
    private LiveData<List<Customer>> customersLiveData;
    private LiveData<List<Cake>> cakesLiveData;
    private LiveData<List<Order>> ordersLiveData;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });
        
        try {
            initViews();
            initDatabase();
            setupTabs();
            setupRecyclerView();
            setupButtons();
            
            // Load data after a short delay to ensure everything is initialized
            recyclerView.postDelayed(() -> {
                loadData();
                addSampleData();
            }, 100);
            
        } catch (Exception e) {
            Toast.makeText(this, "L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng: " + e.getMessage(), Toast.LENGTH_LONG).show();
            e.printStackTrace();
        }
    }
    
    private void initViews() {
        tabLayout = findViewById(R.id.tabLayout);
        recyclerView = findViewById(R.id.recyclerView);
        btnAdd = findViewById(R.id.btnAdd);
        btnRefresh = findViewById(R.id.btnRefresh);
        if (btnRefresh != null) {
            btnRefresh.setVisibility(View.GONE);
        }
    }
    
    private void initDatabase() {
        try {
            database = AppDatabase.getInstance(this);
            if (database == null) {
                Toast.makeText(this, "Kh√¥ng th·ªÉ kh·ªüi t·∫°o database", Toast.LENGTH_SHORT).show();
                return;
            }
            
            customerDao = database.customerDao();
            cakeDao = database.cakeDao();
            orderDao = database.orderDao();
            
            if (customerDao == null || cakeDao == null || orderDao == null) {
                Toast.makeText(this, "Kh√¥ng th·ªÉ kh·ªüi t·∫°o DAO", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Kh·ªüi t·∫°o ExecutorService
            executorService = Executors.newFixedThreadPool(4);
            
            // Kh·ªüi t·∫°o LiveData
            customersLiveData = customerDao.getAllCustomers();
            cakesLiveData = cakeDao.getAllCakes();
            ordersLiveData = orderDao.getAllOrders();
            
            // Thi·∫øt l·∫≠p observers
            setupObservers();
            
        } catch (Exception e) {
            Toast.makeText(this, "L·ªói kh·ªüi t·∫°o database: " + e.getMessage(), Toast.LENGTH_LONG).show();
            e.printStackTrace();
        }
    }
    
    private void setupObservers() {
        // Observer cho customers
        customersLiveData.observe(this, new Observer<List<Customer>>() {
            @Override
            public void onChanged(List<Customer> customerList) {
                if (customerList != null) {
                    customers.clear();
                    customers.addAll(customerList);
                    if (customerAdapter != null) {
                        customerAdapter.updateCustomers(customers);
                    }
                }
            }
        });
        
        // Observer cho cakes
        cakesLiveData.observe(this, new Observer<List<Cake>>() {
            @Override
            public void onChanged(List<Cake> cakeList) {
                if (cakeList != null) {
                    cakes.clear();
                    cakes.addAll(cakeList);
                    if (cakeAdapter != null) {
                        cakeAdapter.updateCakes(cakes);
                    }
                }
            }
        });
        
        // Observer cho orders
        ordersLiveData.observe(this, new Observer<List<Order>>() {
            @Override
            public void onChanged(List<Order> orderList) {
                if (orderList != null) {
                    orders.clear();
                    orders.addAll(orderList);
                    if (orderAdapter != null) {
                        orderAdapter.updateOrders(orders);
                    }
                }
            }
        });
    }
    
    private void setupTabs() {
        tabLayout.addTab(tabLayout.newTab().setText("üë• Kh√°ch H√†ng"));
        tabLayout.addTab(tabLayout.newTab().setText("üç∞ B√°nh"));
        tabLayout.addTab(tabLayout.newTab().setText("üìã ƒê∆°n H√†ng"));
        
        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                currentTab = tab.getPosition();
                setupRecyclerView();
                loadData();
            }
            
            @Override
            public void onTabUnselected(TabLayout.Tab tab) {}
            
            @Override
            public void onTabReselected(TabLayout.Tab tab) {}
        });
    }
    
    private void setupRecyclerView() {
        if (recyclerView == null) {
            Toast.makeText(this, "RecyclerView kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y", Toast.LENGTH_SHORT).show();
            return;
        }
        
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        
        switch (currentTab) {
            case 0: // Customers
                if (customers == null) customers = new ArrayList<>();
                customerAdapter = new CustomerAdapter(customers);
                customerAdapter.setOnCustomerClickListener(new CustomerAdapter.OnCustomerClickListener() {
                    @Override
                    public void onEditClick(Customer customer) {
                        showCustomerDialog(customer);
                    }
                    
                    @Override
                    public void onDeleteClick(Customer customer) {
                        deleteCustomer(customer);
                    }
                });
                recyclerView.setAdapter(customerAdapter);
                break;
                
            case 1: // Cakes
                if (cakes == null) cakes = new ArrayList<>();
                cakeAdapter = new CakeAdapter(cakes);
                cakeAdapter.setOnCakeClickListener(new CakeAdapter.OnCakeClickListener() {
                    @Override
                    public void onEditClick(Cake cake) {
                        showCakeDialog(cake);
                    }
                    
                    @Override
                    public void onDeleteClick(Cake cake) {
                        deleteCake(cake);
                    }
                });
                recyclerView.setAdapter(cakeAdapter);
                break;
                
            case 2: // Orders
                if (orders == null) orders = new ArrayList<>();
                orderAdapter = new OrderAdapter(orders);
                orderAdapter.setOnOrderClickListener(new OrderAdapter.OnOrderClickListener() {
                    @Override
                    public void onEditClick(Order order) {
                        showOrderDialog(order);
                    }
                    
                    @Override
                    public void onDeleteClick(Order order) {
                        deleteOrder(order);
                    }
                });
                recyclerView.setAdapter(orderAdapter);
                break;
        }
    }
    
    private void setupButtons() {
        btnAdd.setOnClickListener(v -> {
            switch (currentTab) {
                case 0:
                    showCustomerDialog(null);
                    break;
                case 1:
                    showCakeDialog(null);
                    break;
                case 2:
                    showOrderDialog(null);
                    break;
            }
        });
        
        // N√∫t refresh ƒë√£ b·ªã ·∫©n v√† v√¥ hi·ªáu h√≥a
    }
    
    private void loadData() {
        // V·ªõi LiveData, d·ªØ li·ªáu s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t th√¥ng qua observers
        // Kh√¥ng c·∫ßn g·ªçi c√°c ph∆∞∆°ng th·ª©c load ri√™ng l·∫ª n·ªØa
        Toast.makeText(this, "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông", Toast.LENGTH_SHORT).show();
    }
    
    // Customer CRUD Operations
    
    private void showCustomerDialog(Customer customer) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        View view = LayoutInflater.from(this).inflate(R.layout.dialog_user, null);
        builder.setView(view);
        
        EditText etName = view.findViewById(R.id.etCustomerName);
        EditText etEmail = view.findViewById(R.id.etCustomerEmail);
        EditText etPhone = view.findViewById(R.id.etCustomerPhone);
        EditText etAddress = view.findViewById(R.id.etCustomerAddress);
        Spinner spType = view.findViewById(R.id.spCustomerType);
        Button btnSave = view.findViewById(R.id.btnSaveCustomer);
        Button btnCancel = view.findViewById(R.id.btnCancelCustomer);
        
        if (customer != null) {
            etName.setText(customer.getName());
            etEmail.setText(customer.getEmail());
            etPhone.setText(customer.getPhone());
            etAddress.setText(customer.getAddress());
            // preset selection theo customerType
            String[] types = {"VIP", "Regular", "New"};
            int sel = 1; // default Regular
            for (int i = 0; i < types.length; i++) if (types[i].equalsIgnoreCase(customer.getCustomerType())) { sel = i; break; }
            spType.setSelection(sel);
        }
        
        AlertDialog dialog = builder.create();
        
        btnSave.setOnClickListener(v -> {
            String name = etName.getText().toString().trim();
            String email = etEmail.getText().toString().trim();
            String phone = etPhone.getText().toString().trim();
            String address = etAddress.getText().toString().trim();
            String type = spType.getSelectedItem() != null ? spType.getSelectedItem().toString() : "";
            
            // Validation c∆° b·∫£n
            if (name.isEmpty() || email.isEmpty() || phone.isEmpty() || address.isEmpty() || type.isEmpty()) {
                Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Validation t√™n (√≠t nh·∫•t 2 k√Ω t·ª±)
            if (name.length() < 2) {
                Toast.makeText(this, "T√™n kh√°ch h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Validation email format
            if (!isValidEmail(email)) {
                Toast.makeText(this, "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Validation s·ªë ƒëi·ªán tho·∫°i (ch·ªâ s·ªë, 10-11 ch·ªØ s·ªë)
            if (!isValidPhone(phone)) {
                Toast.makeText(this, "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Validation ƒë·ªãa ch·ªâ (√≠t nh·∫•t 10 k√Ω t·ª±)
            if (address.length() < 10) {
                Toast.makeText(this, "ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Validation lo·∫°i kh√°ch h√†ng
            if (!isValidCustomerType(type)) {
                Toast.makeText(this, "Lo·∫°i kh√°ch h√†ng kh√¥ng h·ª£p l·ªá (VIP, Regular, New)", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Ki·ªÉm tra email tr√πng l·∫∑p (ch·ªâ khi th√™m m·ªõi)
            if (customer == null) {
                checkEmailExistsAndInsert(email, name, phone, address, type, dialog);
            } else {
                // Khi c·∫≠p nh·∫≠t, ch·ªâ ki·ªÉm tra email tr√πng n·∫øu email thay ƒë·ªïi
                if (!customer.getEmail().equals(email)) {
                    checkEmailExistsAndUpdate(customer, email, name, phone, address, type, dialog);
                } else {
                    customer.setName(name);
                    customer.setEmail(email);
                    customer.setPhone(phone);
                    customer.setAddress(address);
                    customer.setCustomerType(type);
                    updateCustomer(customer);
                    dialog.dismiss();
                }
            }
        });
        
        btnCancel.setOnClickListener(v -> dialog.dismiss());
        
        dialog.show();
    }
    
    // Validation methods
    private boolean isValidEmail(String email) {
        String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
        return email.matches(emailPattern);
    }
    
    private boolean isValidPhone(String phone) {
        // Ch·ªâ ch·ª©a s·ªë v√† c√≥ ƒë·ªô d√†i 10-11 ch·ªØ s·ªë
        return phone.matches("^[0-9]{10,11}$");
    }
    
    private boolean isValidCustomerType(String type) {
        String[] validTypes = {"VIP", "Regular", "New"};
        for (String validType : validTypes) {
            if (validType.equalsIgnoreCase(type)) {
                return true;
            }
        }
        return false;
    }
    
    // Ki·ªÉm tra email tr√πng l·∫∑p khi th√™m m·ªõi
    private void checkEmailExistsAndInsert(String email, String name, String phone, String address, String type, AlertDialog dialog) {
        executorService.execute(() -> {
            try {
                Customer existingCustomer = customerDao.getCustomerByEmail(email).getValue();
                runOnUiThread(() -> {
                    if (existingCustomer != null) {
                        Toast.makeText(MainActivity.this, "‚ùå Email n√†y ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!", Toast.LENGTH_SHORT).show();
                    } else {
                        Customer newCustomer = new Customer(name, email, phone, address, type);
                        insertCustomer(newCustomer);
                        dialog.dismiss();
                    }
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói ki·ªÉm tra email: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    // Ki·ªÉm tra email tr√πng l·∫∑p khi c·∫≠p nh·∫≠t
    private void checkEmailExistsAndUpdate(Customer customer, String email, String name, String phone, String address, String type, AlertDialog dialog) {
        executorService.execute(() -> {
            try {
                Customer existingCustomer = customerDao.getCustomerByEmail(email).getValue();
                runOnUiThread(() -> {
                    if (existingCustomer != null && existingCustomer.getId() != customer.getId()) {
                        Toast.makeText(MainActivity.this, "‚ùå Email n√†y ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!", Toast.LENGTH_SHORT).show();
                    } else {
                        customer.setName(name);
                        customer.setEmail(email);
                        customer.setPhone(phone);
                        customer.setAddress(address);
                        customer.setCustomerType(type);
                        updateCustomer(customer);
                        dialog.dismiss();
                    }
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói ki·ªÉm tra email: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void insertCustomer(Customer customer) {
        executorService.execute(() -> {
            try {
                customerDao.insertCustomer(customer);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚úÖ Th√™m kh√°ch h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói th√™m kh√°ch h√†ng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void updateCustomer(Customer customer) {
        executorService.execute(() -> {
            try {
                customerDao.updateCustomer(customer);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚úÖ C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói c·∫≠p nh·∫≠t kh√°ch h√†ng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void deleteCustomer(Customer customer) {
        new AlertDialog.Builder(this)
                .setTitle("üóëÔ∏è X√≥a Kh√°ch H√†ng")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch h√†ng n√†y?")
                .setPositiveButton("C√≥", (dialog, which) -> {
                    executorService.execute(() -> {
                        try {
                            customerDao.deleteCustomer(customer);
                            runOnUiThread(() -> {
                                Toast.makeText(MainActivity.this, "‚úÖ X√≥a kh√°ch h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                            });
                        } catch (Exception e) {
                            runOnUiThread(() -> {
                                Toast.makeText(MainActivity.this, "‚ùå L·ªói x√≥a kh√°ch h√†ng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                            });
                        }
                    });
                })
                .setNegativeButton("Kh√¥ng", null)
                .show();
    }
    
    // Cake CRUD Operations
    
    private void showCakeDialog(Cake cake) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        View view = LayoutInflater.from(this).inflate(R.layout.dialog_product, null);
        builder.setView(view);
        
        EditText etName = view.findViewById(R.id.etCakeName);
        EditText etDescription = view.findViewById(R.id.etCakeDescription);
        EditText etPrice = view.findViewById(R.id.etCakePrice);
        EditText etStock = view.findViewById(R.id.etCakeStock);
        EditText etCategory = view.findViewById(R.id.etCakeCategory);
        EditText etSize = view.findViewById(R.id.etCakeSize);
        EditText etFlavor = view.findViewById(R.id.etCakeFlavor);
        Button btnSave = view.findViewById(R.id.btnSaveCake);
        Button btnCancel = view.findViewById(R.id.btnCancelCake);
        
        if (cake != null) {
            etName.setText(cake.getName());
            etDescription.setText(cake.getDescription());
            etPrice.setText(String.valueOf(cake.getPrice()));
            etStock.setText(String.valueOf(cake.getStock()));
            etCategory.setText(cake.getCategory());
            etSize.setText(cake.getSize());
            etFlavor.setText(cake.getFlavor());
        }
        
        AlertDialog dialog = builder.create();
        
        btnSave.setOnClickListener(v -> {
            String name = etName.getText().toString().trim();
            String description = etDescription.getText().toString().trim();
            String priceStr = etPrice.getText().toString().trim();
            String stockStr = etStock.getText().toString().trim();
            String category = etCategory.getText().toString().trim();
            String size = etSize.getText().toString().trim();
            String flavor = etFlavor.getText().toString().trim();
            
            if (name.isEmpty() || description.isEmpty() || priceStr.isEmpty() || stockStr.isEmpty() || category.isEmpty() || size.isEmpty() || flavor.isEmpty()) {
                Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", Toast.LENGTH_SHORT).show();
                return;
            }
            
            try {
                double price = Double.parseDouble(priceStr);
                int stock = Integer.parseInt(stockStr);
                
                if (cake == null) {
                    Cake newCake = new Cake(name, description, price, stock, category, size, flavor);
                    insertCake(newCake);
                } else {
                    cake.setName(name);
                    cake.setDescription(description);
                    cake.setPrice(price);
                    cake.setStock(stock);
                    cake.setCategory(category);
                    cake.setSize(size);
                    cake.setFlavor(flavor);
                    updateCake(cake);
                }
                
                dialog.dismiss();
            } catch (NumberFormatException e) {
                Toast.makeText(this, "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho gi√° v√† s·ªë l∆∞·ª£ng", Toast.LENGTH_SHORT).show();
            }
        });
        
        btnCancel.setOnClickListener(v -> dialog.dismiss());
        
        dialog.show();
    }
    
    private void insertCake(Cake cake) {
        executorService.execute(() -> {
            try {
                cakeDao.insertCake(cake);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚úÖ Th√™m b√°nh th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói th√™m b√°nh: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void updateCake(Cake cake) {
        executorService.execute(() -> {
            try {
                cakeDao.updateCake(cake);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚úÖ C·∫≠p nh·∫≠t b√°nh th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói c·∫≠p nh·∫≠t b√°nh: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void deleteCake(Cake cake) {
        new AlertDialog.Builder(this)
                .setTitle("üóëÔ∏è X√≥a B√°nh")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√°nh n√†y?")
                .setPositiveButton("C√≥", (dialog, which) -> {
                    executorService.execute(() -> {
                        try {
                            cakeDao.deleteCake(cake);
                            runOnUiThread(() -> {
                                Toast.makeText(MainActivity.this, "‚úÖ X√≥a b√°nh th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                            });
                        } catch (Exception e) {
                            runOnUiThread(() -> {
                                Toast.makeText(MainActivity.this, "‚ùå L·ªói x√≥a b√°nh: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                            });
                        }
                    });
                })
                .setNegativeButton("Kh√¥ng", null)
                .show();
    }
    
    // Order CRUD Operations
    
    private void showOrderDialog(Order order) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        View view = LayoutInflater.from(this).inflate(R.layout.dialog_order, null);
        builder.setView(view);
        
        Spinner spCustomer = view.findViewById(R.id.spOrderCustomer);
        Spinner spCake = view.findViewById(R.id.spOrderCake);
        EditText etQuantity = view.findViewById(R.id.etOrderQuantity);
        EditText etTotal = view.findViewById(R.id.etOrderTotal);
        EditText etDate = view.findViewById(R.id.etOrderDate);
        EditText etDeliveryDate = view.findViewById(R.id.etOrderDeliveryDate);
        EditText etStatus = view.findViewById(R.id.etOrderStatus);
        EditText etInstructions = view.findViewById(R.id.etOrderSpecialInstructions);
        EditText etAddress = view.findViewById(R.id.etOrderDeliveryAddress);
        Button btnSave = view.findViewById(R.id.btnSaveOrder);
        Button btnCancel = view.findViewById(R.id.btnCancelOrder);
        
        // Chu·∫©n b·ªã d·ªØ li·ªáu spinner kh√°ch h√†ng
        List<Customer> localCustomers = new ArrayList<>(customers != null ? customers : new ArrayList<>());
        List<String> customerNames = new ArrayList<>();
        for (Customer c : localCustomers) {
            customerNames.add(c.getName());
        }
        ArrayAdapter<String> customerAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, customerNames);
        customerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spCustomer.setAdapter(customerAdapter);

        // Chu·∫©n b·ªã d·ªØ li·ªáu spinner b√°nh
        List<Cake> localCakes = new ArrayList<>(cakes != null ? cakes : new ArrayList<>());
        List<String> cakeNames = new ArrayList<>();
        for (Cake c : localCakes) {
            cakeNames.add(c.getName());
        }
        ArrayAdapter<String> cakeAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, cakeNames);
        cakeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spCake.setAdapter(cakeAdapter);

        if (order != null) {
            // preset selection theo customerId c·ªßa order
            if (localCustomers != null && !localCustomers.isEmpty()) {
                int idx = 0;
                for (int i = 0; i < localCustomers.size(); i++) {
                    if (localCustomers.get(i).getId() == order.getCustomerId()) { idx = i; break; }
                }
                spCustomer.setSelection(idx);
            }
            if (localCakes != null && !localCakes.isEmpty()) {
                int idxCake = 0;
                for (int i = 0; i < localCakes.size(); i++) {
                    if (localCakes.get(i).getId() == order.getCakeId()) { idxCake = i; break; }
                }
                spCake.setSelection(idxCake);
            }
            etQuantity.setText(String.valueOf(order.getQuantity()));
            etTotal.setText(String.valueOf(order.getTotalPrice()));
            etDate.setText(order.getOrderDate());
            etDeliveryDate.setText(order.getDeliveryDate());
            etStatus.setText(order.getStatus());
            etInstructions.setText(order.getSpecialInstructions());
            etAddress.setText(order.getDeliveryAddress());
        } else {
            // Set default values for new orders
            String currentDate = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date());
            etDate.setText(currentDate);
            etStatus.setText("Pending");
        }

        // Date pickers cho ng√†y ƒë·∫∑t v√† ng√†y giao
        View.OnClickListener dateClickListener = v -> {
            final Calendar cal = Calendar.getInstance();
            int y = cal.get(Calendar.YEAR), m = cal.get(Calendar.MONTH), d = cal.get(Calendar.DAY_OF_MONTH);
            DatePickerDialog dp = new DatePickerDialog(this, (view1, year, month, dayOfMonth) -> {
                String mm = String.format(Locale.getDefault(), "%02d", month + 1);
                String dd = String.format(Locale.getDefault(), "%02d", dayOfMonth);
                ((EditText) v).setText(year + "-" + mm + "-" + dd);
            }, y, m, d);
            dp.show();
        };
        etDate.setOnClickListener(dateClickListener);
        etDeliveryDate.setOnClickListener(dateClickListener);
        
        AlertDialog dialog = builder.create();
        
        btnSave.setOnClickListener(v -> {
            // L·∫•y customerId t·ª´ spinner
            int selectedPos = spCustomer.getSelectedItemPosition();
            String customerIdStr = (selectedPos >= 0 && selectedPos < localCustomers.size()) ? String.valueOf(localCustomers.get(selectedPos).getId()) : "";
            // L·∫•y cakeId t·ª´ spinner
            int selectedCakePos = spCake.getSelectedItemPosition();
            String cakeIdStr = (selectedCakePos >= 0 && selectedCakePos < localCakes.size()) ? String.valueOf(localCakes.get(selectedCakePos).getId()) : "";
            String quantityStr = etQuantity.getText().toString().trim();
            String totalStr = etTotal.getText().toString().trim();
            String date = etDate.getText().toString().trim();
            String deliveryDate = etDeliveryDate.getText().toString().trim();
            String status = etStatus.getText().toString().trim();
            String instructions = etInstructions.getText().toString().trim();
            String address = etAddress.getText().toString().trim();
            
            if (customerIdStr.isEmpty() || cakeIdStr.isEmpty() || quantityStr.isEmpty() || totalStr.isEmpty() || date.isEmpty() || status.isEmpty()) {
                Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc", Toast.LENGTH_SHORT).show();
                return;
            }
            
            try {
                int customerId = Integer.parseInt(customerIdStr);
                int cakeId = Integer.parseInt(cakeIdStr);
                int quantity = Integer.parseInt(quantityStr);
                double total = Double.parseDouble(totalStr);
                
                if (order == null) {
                    Order newOrder = new Order(customerId, cakeId, quantity, total, date, deliveryDate, status, instructions, address);
                    insertOrder(newOrder);
                } else {
                    order.setCustomerId(customerId);
                    order.setCakeId(cakeId);
                    order.setQuantity(quantity);
                    order.setTotalPrice(total);
                    order.setOrderDate(date);
                    order.setDeliveryDate(deliveryDate);
                    order.setStatus(status);
                    order.setSpecialInstructions(instructions);
                    order.setDeliveryAddress(address);
                    updateOrder(order);
                }
                
                dialog.dismiss();
            } catch (NumberFormatException e) {
                Toast.makeText(this, "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá", Toast.LENGTH_SHORT).show();
            }
        });
        
        btnCancel.setOnClickListener(v -> dialog.dismiss());
        
        dialog.show();
    }
    
    private void insertOrder(Order order) {
        executorService.execute(() -> {
            try {
                orderDao.insertOrder(order);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚úÖ Th√™m ƒë∆°n h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói th√™m ƒë∆°n h√†ng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void updateOrder(Order order) {
        executorService.execute(() -> {
            try {
                orderDao.updateOrder(order);
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
            }
        });
    }
    
    private void deleteOrder(Order order) {
        new AlertDialog.Builder(this)
                .setTitle("üóëÔ∏è X√≥a ƒê∆°n H√†ng")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng n√†y?")
                .setPositiveButton("C√≥", (dialog, which) -> {
                    executorService.execute(() -> {
                        try {
                            orderDao.deleteOrder(order);
                            runOnUiThread(() -> {
                                Toast.makeText(MainActivity.this, "‚úÖ X√≥a ƒë∆°n h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                            });
                        } catch (Exception e) {
                            runOnUiThread(() -> {
                                Toast.makeText(MainActivity.this, "‚ùå L·ªói x√≥a ƒë∆°n h√†ng: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                            });
                        }
                    });
                })
                .setNegativeButton("Kh√¥ng", null)
                .show();
    }
    
    // Add sample data for demonstration
    private void addSampleData() {
        if (customerDao == null || cakeDao == null) {
            Toast.makeText(this, "DAO ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o", Toast.LENGTH_SHORT).show();
            return;
        }
        
        executorService.execute(() -> {
            try {
                // Ki·ªÉm tra v√† th√™m sample customers
                List<Customer> existingCustomers = customerDao.getAllCustomers().getValue();
                if (existingCustomers == null || existingCustomers.isEmpty()) {
                    customerDao.insertCustomers(
                        new Customer("Nguy·ªÖn VƒÉn An", "an.nguyen@email.com", "0123456789", "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM", "VIP"),
                        new Customer("Tr·∫ßn Th·ªã B√¨nh", "binh.tran@email.com", "0987654321", "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM", "Regular"),
                        new Customer("L√™ VƒÉn C∆∞·ªùng", "cuong.le@email.com", "0369852147", "789 ƒê∆∞·ªùng DEF, Qu·∫≠n 3, TP.HCM", "New")
                    );
                }
                
                // Ki·ªÉm tra v√† th√™m sample cakes
                List<Cake> existingCakes = cakeDao.getAllCakes().getValue();
                if (existingCakes == null || existingCakes.isEmpty()) {
                    cakeDao.insertCakes(
                        new Cake("B√°nh Sinh Nh·∫≠t Chocolate", "B√°nh sinh nh·∫≠t chocolate th∆°m ngon v·ªõi kem t∆∞∆°i", 250000, 10, "Birthday", "Medium", "Chocolate"),
                        new Cake("B√°nh C∆∞·ªõi Vanilla", "B√°nh c∆∞·ªõi vanilla sang tr·ªçng cho ng√†y ƒë·∫∑c bi·ªát", 500000, 5, "Wedding", "Large", "Vanilla"),
                        new Cake("B√°nh K·ª∑ Ni·ªám Strawberry", "B√°nh k·ª∑ ni·ªám v·ªã d√¢u t√¢y ng·ªçt ng√†o", 180000, 15, "Anniversary", "Small", "Strawberry"),
                        new Cake("B√°nh Tiramisu", "B√°nh tiramisu √ù truy·ªÅn th·ªëng", 320000, 8, "Custom", "Medium", "Mixed"),
                        new Cake("B√°nh Red Velvet", "B√°nh red velvet v·ªõi cream cheese", 280000, 12, "Birthday", "Medium", "Mixed")
                    );
                }
            } catch (Exception e) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "‚ùå L·ªói th√™m d·ªØ li·ªáu m·∫´u: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
                e.printStackTrace();
            }
        });
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
        }
    }
}